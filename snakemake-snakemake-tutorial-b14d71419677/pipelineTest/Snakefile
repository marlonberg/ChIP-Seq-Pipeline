rule all:
    input: "FastQCfiles/p1_DM_H3K4_boeckel_R1_fastqc.zip","trimmed/p1_DM_H3K4_boeckel_R1.fastq.trimmed", "trimmed/p1_DM_H3K4_boeckel_R1.fastq.lengths","trimmedInput/p1_DM_input_boeckel_R1.fastq.trimmed", "trimmedInput/p1_DM_input_boeckel_R1.fastq.lengths","mapped/Aligned.out.sam","mapped/Log.out","mapped/Log.progress.out","mapped/log.final.out","mapped/SJ.out.tab","mappedInput/Aligned.out.sam","mappedInput/Log.out","mappedInput/Log.progress.out","mappedInput/log.final.out","mappedInput/SJ.out.tab","TagDir","inputTagDir","TagDir/regions.txt"


rule fastqc:
    input: "p1_DM_H3K4_boeckel_R1.fastq"
    output: "FastQCfiles/p1_DM_H3K4_boeckel_R1_fastqc.zip"
    shell: "fastqc -o FastQCfiles {input}"

rule trimm:
    input: "p1_DM_H3K4_boeckel_R1.fastq"
    output: "trimmed/p1_DM_H3K4_boeckel_R1.fastq.trimmed", "trimmed/p1_DM_H3K4_boeckel_R1.fastq.lengths"
    shell: "homerTools trim {input} -o trimmed"

rule trimmInput:
    input: "p1_DM_input_boeckel_R1.fastq"
    output: "trimmedInput/p1_DM_input_boeckel_R1.fastq.trimmed", "trimmedInput/p1_DM_input_boeckel_R1.fastq.lengths"
    shell: "homerTools trim {input} -o trimmedInput"

rule readMapping:
    input: "trimmed/p1_DM_H3K4_boeckel_R1.fastq.trimmed","/media/ATLAS_Genomes_Annotations/human/GRCH38/primary_assembly/star_index"
    output: "mapped/Aligned.out.sam","mapped/Log.out","mapped/Log.progress.out","mapped/log.final.out","mapped/SJ.out.tab"
    shell: "STAR --readFilesIn {input[0]} --genomeDir {input[1]} --outFileNamePrefix mapped"

rule readMappingInput:
    input: "trimmedInput/p1_DM_input_boeckel_R1.fastq.trimmed", "trimmedInput/p1_DM_input_boeckel_R1.fastq.lengths"
    output:"mappedInput/Aligned.out.sam","mappedInput/Log.out","mappedInput/Log.progress.out","mappedInput/log.final.out","mappedInput/SJ.out.tab"

rule makeTagDir:
    input: "p1_DM_H3K4_boeckel_R1.fastq"
    output: "TagDir"
    shell: "makeTagDirectory {output} {input}"

rule makeContolTagDir:
    input: "p1_DM_input_boeckel_R1.fastq"
    output: "inputTagDir"
    shell: "makeTagDirectory {output} {input}"

rule peakCalling:
    input: "TagDir","inputTagDir"
    output: "TagDir/regions.txt"
    shell: "findPeaks {input[0]} -stile histone -o auto {input[1]}"

    







